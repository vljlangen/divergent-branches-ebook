[["index.html", "Divergent Git branches - ongelmasta ratkaisuun 1 Esipuhe 1.1 Kenelle tämä kirja on tarkoitettu? 1.2 Rakenne", " Divergent Git branches - ongelmasta ratkaisuun Ville Langén 11.01.2025 1 Esipuhe Tässä e-kirjassa esittelen, kuinka Gitin haarojen erkaantuminen eli divergent branches -ongelma on helposti ratkaistavissa pienissä Git-projekteissa, joissa tavoitteena on toimia pääasiassa lähinnä yhden saman päähaaran sisällä. 1.1 Kenelle tämä kirja on tarkoitettu? Tämä kirja on suunnattu tutkijoille, datatieteilijöille ja ohjelmoijille, jotka käyttävät Gitiä tieteellisissä projekteissaan ja haluavat syventää osaamistaan haarojen hallinnasta. 1.2 Rakenne Kirja on jaettu kolmeen osaan: 1. Perusteet: Gitin toiminnan ja haarautumisen ymmärtäminen. 2. Menetelmät divergent-haarojen hallintaan: - Menetelmä 1: Tiedoston siirto ja pakotettu päivitys. - Menetelmä 2: Tiedoston uudelleennimeäminen ja hakeminen. - Menetelmä 3: Manuaalinen konfliktien ratkaisu yhdistämisen yhteydessä. 3. Käytännön vinkit ja parhaat käytännöt: Esimerkkejä ja vinkkejä tutkimusprojekteihin. Seuraavassa luvussa sukellamme Gitin perusteisiin ja sen toimintaan haarautumisessa. Tämä opas on saatavilla myös englanniksi: this short guide is available also in English. Divergent Git branches - ongelmasta ratkaisuun © 2025 by Ville Langén is licensed under the CC BY-SA 4.0. "],["yksi-git-haara-vaiko-monta.html", "2 Yksi Git-haara vaiko monta? 2.1 Ohjelmistokehityksen Git-haarat 2.2 “Akateeminen” Gitin käyttö 2.3 Yhteenveto", " 2 Yksi Git-haara vaiko monta? Git-työskentelytavat eroavat merkittävästi ohjelmistokehityksessä ja akateemisessa tutkimuksessa, mikä johtuu kunkin projektityypin tavoitteista ja ryhmän rakenteesta. Tässä luvussa tarkastelemme näitä eroja ja niiden vaikutuksia haarojen hallintaan. 2.1 Ohjelmistokehityksen Git-haarat Ohjelmistokehityksessä (esim. tietokonepelien ohjelmoinnissa) työryhmät hyödyntävät usein useita Git-haaroja samanaikaisesti. Tyypillinen työnkulku sisältää: Päähaaran (main tai master), joka sisältää tuotantoversion. Useita muita haaroja, joissa yksittäiset ominaisuudet kehitetään ja testataan erikseen. Yhdistämiset päähaaraan tehdään vasta, kun ominaisuudet ovat valmiita. Tämä rakenne mahdollistaa rinnakkaisen kehityksen, minimoi konflikteja ja varmistaa, että päähaara pysyy vakaana. Alla näkyvä virtauskaavio kuvaa tätä toimintatapaa: 2.2 “Akateeminen” Gitin käyttö Akateemisessa tutkimuksessa työryhmät käyttävät usein pelkkää yhtä Git-päähaaraa. Syitä tälle: Yhteistyö tapahtuu usein yhden tai muutaman yhteisen tiedoston (esim. artikkelin) parissa. Haarojen käyttö voisi olla monimutkaista pienemmissä tiimeissä tai epämuodollisessa ympäristössä. Tätä työnkulun rakennetta kuvastaa seuraava kaavio: Tämä lähestymistapa tekee työnjaosta yksinkertaista, mutta lisää riskiä haarojen divergenssistä, jos useat jäsenet muokkaavat samaa tiedostoa samanaikaisesti. 2.3 Yhteenveto Ohjelmistokehityksen ja akateemisten projektien erot Git-työskentelyssä heijastavat kummankin alan prioriteetteja. Ohjelmistokehityksessä korostetaan stabiliteettia ja rinnakkaista kehitystä, kun taas akateemisissa projekteissa yksinkertaisuus ja yhteinen työskentely päähaarassa ovat etusijalla. Divergent Git branches - ongelmasta ratkaisuun © 2025 by Ville Langén is licensed under the CC BY-SA 4.0. "],["ongelmaton-päähaara.html", "3 Ongelmaton päähaara 3.1 Tilanne: Remote Main (C0) 3.2 Käyttäjä 1: Pull (C0) 3.3 Käyttäjä 1: muokkaus ja push (C1) 3.4 Käyttäjä 2: Pull (C1) 3.5 Käyttäjä 2: muokkaus ja push (C2) 3.6 Yhteenveto", " 3 Ongelmaton päähaara Tässä luvussa tarkastelemme yksinkertaista esimerkkiä, jossa kaksi käyttäjää työskentelee päähaarassa ilman ristiriitoja. Näemme, miten muutokset kulkevat loogisesti ja ilman ongelmia Gitin avulla. 3.1 Tilanne: Remote Main (C0) Työ alkaa etähakemistossa olevasta päähaarasta, jossa viimeisin tilanne on commit C0. Etähakemistoa kuvaa seuraava kaavio: 3.2 Käyttäjä 1: Pull (C0) Pull: Käyttäjä 1 lataa uusimmat tiedot etähakemistosta (C0) paikalliseen hakemistoonsa. 3.3 Käyttäjä 1: muokkaus ja push (C1) Muokkaus: Käyttäjä 1 muokkaa tiedostoja ja tekee commitin C1. Push: Muutokset päivitetään takaisin etähakemistoon. Tilanne etähakemistossa commitin C1 jälkeen: 3.4 Käyttäjä 2: Pull (C1) Pull: Käyttäjä 2 lataa commitin C1 paikalliseen hakemistoonsa. 3.5 Käyttäjä 2: muokkaus ja push (C2) Muokkaus: Käyttäjä 2 muokkaa tiedostoja ja tekee commitin C2. Push: Muutokset päivitetään takaisin etähakemistoon. Tilanne etähakemistossa commitin C2 jälkeen: 3.6 Yhteenveto Tässä yksinkertaisessa esimerkissä molemmat käyttäjät työskentelivät päähaarassa ilman ristiriitoja. Jokainen vaihe seuraa loogisesti toistaan: pull → muokkaus → commit → push. Seuraavassa luvussa tarkastelemme tilannetta, jossa molemmat käyttäjät muokkaavat commitia C0 samanaikaisesti. Tämä voi johtaa divergent-haaroihin ja konfliktien ratkaisuun. R-opas by Ville Langén is licensed under Attribution-ShareAlike 4.0 International "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
