[["index.html", "Divergent Git branches - ongelmasta ratkaisuun 1 Esipuhe 1.1 Kenelle tämä kirja on tarkoitettu? 1.2 Rakenne", " Divergent Git branches - ongelmasta ratkaisuun Ville Langén 12.01.2025 1 Esipuhe Tässä e-kirjassa esittelen, kuinka Gitin haarojen erkaantuminen eli divergent branches -ongelma on helposti ratkaistavissa pienissä Git-projekteissa, joissa tavoitteena on toimia pääasiassa lähinnä yhden saman päähaaran sisällä. 1.1 Kenelle tämä kirja on tarkoitettu? Tämä kirja on suunnattu tutkijoille, datatieteilijöille ja ohjelmoijille, jotka käyttävät Gitiä tieteellisissä projekteissaan ja haluavat syventää osaamistaan haarojen hallinnasta. 1.2 Rakenne Kirja on jaettu kolmeen osaan: 1. Perusteet: Gitin toiminnan ja haarautumisen ymmärtäminen. 2. Menetelmät divergent-haarojen hallintaan: - Menetelmä 1: Tiedoston siirto ja pakotettu päivitys. - Menetelmä 2: Tiedoston uudelleennimeäminen ja hakeminen. - Menetelmä 3: Manuaalinen konfliktien ratkaisu yhdistämisen yhteydessä. 3. Käytännön vinkit ja parhaat käytännöt: Esimerkkejä ja vinkkejä tutkimusprojekteihin. Seuraavassa luvussa sukellamme Gitin perusteisiin ja sen toimintaan haarautumisessa. Tämä opas on saatavilla myös englanniksi: this short guide is available also in English. Divergent Git branches - ongelmasta ratkaisuun © 2025 by Ville Langén is licensed under the CC BY-SA 4.0. "],["yksi-git-haara-vaiko-monta.html", "2 Yksi Git-haara vaiko monta? 2.1 Git ohjelmistokehityksessä 2.2 Git academiassa 2.3 Yhteenveto", " 2 Yksi Git-haara vaiko monta? Git-työskentelytavat eroavat merkittävästi ohjelmistokehityksessä ja akateemisessa tutkimuksessa, mikä johtuu kunkin projektityypin tavoitteista ja ryhmän rakenteesta. Tässä luvussa tarkastelemme näitä eroja ja niiden vaikutuksia haarojen hallintaan. 2.1 Git ohjelmistokehityksessä Ohjelmistokehityksessä (esim. tietokonepelien ohjelmoinnissa) työryhmät hyödyntävät usein useita Git-haaroja samanaikaisesti. Tyypillinen työnkulku sisältää: Päähaaran (main tai master), joka sisältää tuotantoversion. Useita muita haaroja, joissa yksittäiset ominaisuudet kehitetään ja testataan erikseen. Yhdistämiset päähaaraan tehdään vasta, kun ominaisuudet ovat valmiita. Tämä rakenne mahdollistaa rinnakkaisen kehityksen, minimoi konflikteja ja varmistaa, että päähaara pysyy vakaana. Alla näkyvä virtauskaavio kuvaa tätä toimintatapaa: 2.2 Git academiassa Akateemisessa tutkimuksessa työryhmät käyttävät usein pelkkää yhtä Git-päähaaraa. Syitä tälle: Yhteistyö tapahtuu usein yhden tai muutaman yhteisen tiedoston (esim. artikkelin) parissa. Haarojen käyttö voisi olla monimutkaista pienemmissä tiimeissä tai epämuodollisessa ympäristössä. Tätä työnkulun rakennetta kuvastaa seuraava kaavio: Tämä lähestymistapa tekee työnjaosta yksinkertaista, mutta lisää riskiä haarojen divergenssistä, jos useat jäsenet muokkaavat samaa tiedostoa samanaikaisesti. 2.3 Yhteenveto Ohjelmistokehityksen ja akateemisten projektien erot Git-työskentelyssä heijastavat kummankin alan prioriteetteja. Ohjelmistokehityksessä korostetaan stabiliteettia ja rinnakkaista kehitystä, kun taas akateemisissa projekteissa yksinkertaisuus ja yhteinen työskentely päähaarassa ovat etusijalla. Divergent Git branches - ongelmasta ratkaisuun © 2025 by Ville Langén is licensed under the CC BY-SA 4.0. "],["ei-git-haaraongelmia.html", "3 Ei Git-haaraongelmia 3.1 Vakaa päähaara 3.2 Yhteenveto", " 3 Ei Git-haaraongelmia Image credit: Pexels Tässä luvussa käsittelemme tilannetta, jossa kaksi tai useampi käyttäjä työskentelee päähaarassa ilman eri päivitysten välisiä divergenssi-ristiriitoja. Esittelen yksinkertaisen työnkulun, jossa käyttäjät tekevät omat muutoksensa ja päivityksensä ilman, että tilanne eskaloituu haaraongelmiksi. Tämä on tyypillinen tilanne, kun jokainen muistaa tehdä pull-komennon ennen omia muokkauksiaan, jolloin päähaara pysyy vakaana. 3.1 Vakaa päähaara Tilanne: Remote Main (C0) Työ alkaa etähakemistossa olevasta päähaarasta, jossa viimeisin tilanne on commit C0. Etähakemistoa kuvaa seuraava kaavio: Käyttäjä 1: Pull (C0) Pull: Käyttäjä 1 lataa uusimmat tiedot etähakemistosta (C0) paikalliseen hakemistoonsa. Käyttäjä 1: muokkaus ja push (C1) Muokkaus: Käyttäjä 1 muokkaa tiedostoja ja tekee commitin C1. Push: Muutokset päivitetään takaisin etähakemistoon. Tilanne etähakemistossa commitin C1 jälkeen: Käyttäjä 2: Pull (C1) Pull: Käyttäjä 2 lataa commitin C1 paikalliseen hakemistoonsa. Käyttäjä 2: muokkaus ja push (C2) Muokkaus: Käyttäjä 2 muokkaa tiedostoja ja tekee commitin C2. Push: Muutokset päivitetään takaisin etähakemistoon. Tilanne etähakemistossa commitin C2 jälkeen: 3.2 Yhteenveto Tässä yksinkertaisessa esimerkissä molemmat käyttäjät työskentelivät päähaarassa ilman ristiriitoja. Jokainen vaihe seuraa loogisesti toistaan: pull → muokkaus → commit → push. Seuraavassa luvussa tarkastelemme tilannetta, jossa molemmat käyttäjät muokkaavat commitia C0 samanaikaisesti. Tämä voi johtaa divergent-haaroihin ja konfliktien ratkaisuun. Divergent Git branches - ongelmasta ratkaisuun © 2025 by Ville Langén is licensed under the CC BY-SA 4.0. "],["haarojen-divergenssi.html", "4 Haarojen divergenssi 4.1 Haaraongelman synty 4.2 Yhteenveto", " 4 Haarojen divergenssi Image credit: Pexels Edellisessä luvussa tarkastelimme tilannetta, jossa kaksi käyttäjää työskenteli päähaarassa ilman ongelmia. Tässä luvussa näemme, mitä tapahtuu, kun kaksi käyttäjää samanaikaisesti tekee muutoksia samaan commit-tilanteeseen C0 ja yrittää työntää omat commitinsa etähakemistoon. 4.1 Haaraongelman synty Vaihe 1: Käyttäjä 1 ja käyttäjä 2 tekevät pull-komennon (C0) Molemmat käyttäjät aloittavat projektin samasta lähtötilanteesta. He tekevät pull-komennon ja päivittävät paikalliset hakemistonsa commit-tilaan C0. Tilanne näytetään tässä kaaviossa: Vaihe 2: Käyttäjä 1:n muokkaukset hyväksytään etähakemistoon Käyttäjä 1 muokkaa tiedostoa ja tekee commitin C1. Käyttäjä 1 suorittaa push-komennon, ja commit C1 hyväksytään etähakemistoon, koska se perustuu suoraan tilaan C0. Vaihe 3: Käyttäjän 2:n muokkauksia ei hyväksytä etähakemistoon Käyttäjä 2 muokkaa toista osaa tiedostosta ja tekee commitin C2. Käyttäjä 2 yrittää suorittaa push-komennon, mutta Git estää tämän, koska etähakemistossa oleva päähaara on edennyt commit-tilaan C1. Käyttäjän 2 paikallinen commit C2 on nyt ristiriidassa etähakemiston tilan kanssa. 4.2 Yhteenveto Kun kaksi käyttäjää yrittää tehdä muutoksia samanaikaisesti ja työntää niitä etähakemistoon, syntyy haarojen divergenssi. Tämä tarkoittaa, että etähakemiston ja paikallisten haarojen välillä on ristiriita, joka vaatii käyttäjältä lisätoimenpiteitä (kuten yhdistämistä tai uudelleenpohjustusta) ongelman ratkaisemiseksi. Seuraavassa luvussa käsittelemme, kuinka näitä ristiriitoja voidaan ratkaista eri tavoilla. Divergent Git branches - ongelmasta ratkaisuun © 2025 by Ville Langén is licensed under the CC BY-SA 4.0. "],["korjausmetodi-1.html", "5 Korjausmetodi 1 5.1 Pull ilman merge-lupaa 5.2 merge-luvan antaminen 5.3 Mergen varmistaminen 5.4 Pull merge-luvalla 5.5 Binaariset tiedostot 5.6 Yhteenveto", " 5 Korjausmetodi 1 Image credit: Pexels Edellisessä luvussa tarkastelimme tilannetta, jossa kaksi käyttäjää samanaikaisesti teki muutoksia samaan commit-tilanteeseen C0 ja yritti työntää omat commitinsa etähakemistoon. Tässä luvussa näemme, mitä tapahtuu, kun käyttäjä asettaa Gitin konfiguraatiot siten, että pull-komento pyrkii automaattisesti yhdistämään (merge) muutokset. Tarkastelemme tilanteen etenemistä etenkin Käyttäjän 2 näkökulmasta. 5.1 Pull ilman merge-lupaa Vaihe 1: Käyttäjä 1 ja Käyttäjä 2 tekevät pull-komennon (C0) Molemmat käyttäjät aloittavat projektin samasta lähtötilanteesta. He tekevät pull-komennon ja päivittävät paikalliset hakemistonsa commit-tilaan C0. Tämän jälkeen he aloittavat tiedoston test.R työstämisen. Se näyttää pisteessä C0 kaikille käyttäjille tältä: Kuva. Alkutilanne commit-pisteessä C0. Vaihe 2: Käyttäjät 1 ja 2 muokkaavat tiedostoa kukin tahollaan Käyttäjä 1 on muokannut tiedostoa ja työntänyt jo sen etähakemistoon. Käyttäjä 2 niin ikään on muokannut tiedostoa, mutta ei ole vielä työntänyt sitä etähakemistoon: Kuva. Käyttäjä 1:n tekemät muutokset jo etähakemistossa (vasen kuva), Käyttäjä 2:n tekemiä muutoksia ei ole vielä pushattu (oikealla). Käyttäjien tekemät muutokset poikkeavat toisistaan selvästi. Vaihe 3: Käyttäjä 2 yrittää pushata tekemiään muokkauksia etähakemistoon Käyttäjä 2 yrittää ensin tehdä pull-komentoa, mutta tämä epäonnistuu: Video Video. Ensimmäinen - ja epäonnistunut - pull-yritys. Käyttäjä 2 yrittää tehdä commit + push -komentoa, mutta myös tämä epäonnistuu: Video Video. Myös commit + push epäonnistuu. Käyttäjä 2 tekee uudelleen pull-komennon ja saa seuraavan virheilmoituksen ohjeineen: Video Video. Uusi - epäonnistunut - pull-yritys. Käyttäjä 2 kopioi leikepöydälle Gitin antamasta ohjeesta seuraavan komennon: git config pull.rebase false Video. Pull-yrityksestä leikepöydälle kopioitava käsky. 5.2 merge-luvan antaminen Ennen kuin Käyttäjä 2 tekee kolmannen pull-yrityksen, hän ajaa Terminalissa komennon git config pull.rebase false antaakseen Gitille luvan yrittää merge-toimintoa, kun uusia muutoksia vedetään etähakemistosta. Komennon ajaminen Terminalissa tapahtuu seuraavasti: Video Video. Komennon git config pull.rebase false ajaminen Terminalissa. 5.3 Mergen varmistaminen Tämän jälkeen Pull-komento onnistuu, ja Git luo uuden yhdistämiscommitin. Git tuottaa kuitenkin varoituksen, joka käskee varmistaa, että yhdistäminen on ollut onnistunutta: /Users/ville/projects/rprojects/divergent-branches/images/Jan-10-2025-23-38-32.mp4 Seuraavaksi Käyttäjä 2:n tulee varmistaa testitiedostoa test.r muokkaamalla, että merge on onnistunut. 5.4 Pull merge-luvalla Nyt Käyttäjä 2 voi onnistuneesti tehdä pull-komennon, joka luo uuden yhdistämiscommitin. Se kuitenkin tuottaa varoituksen, joka käskee varmistaa, että yhdistäminen on ollut onnistunutta: Video Video. Kolmas pull-yritys onnistuu. Video Video. Tiedosto test.R tulee muokata manuaalisesti kuntoon merge-toiminnon jälkeen. Tämän jälkeen commit + push -toiminnot menevät läpi ongelmitta: Video Video. Commit + push -toiminnot menevät läpi etähakemistoon. Nyt tiedosto test.R näkyy Käyttäjä 2:n päivittämässä muodossa GitHubissa: Video Video. Mergen läpikäynyt tiedosto näkyy nyt etähakemistossa GitHubissa. 5.5 Binaariset tiedostot Binaariset tiedostot ovat tiedostoja, jotka sisältävät tietoa muodossa, jota ei voida suoraan lukea tai muokata tekstieditorilla. Esimerkkejä binaarisista tiedostoista ovat esimerkiksi Word-asiakirjat (.docx) ja bittikarttakuvat (esim. .png). Näitä tiedostoja ei voi yhdistää merge-toiminnolla Gitissä, koska niiden sisältöä ei voida tulkita yksinkertaisena tekstinä, ja pienetkin muutokset tiedostossa voivat aiheuttaa suuria eroja binäärisessä rakenteessa. Vaikka asetat Gitin käyttämään git config pull.rebase false varmistaaksesi yksinkertaisemman vedon (pull), se ei auta ratkaisemaan binaaristen tiedostojen yhdistämistä. Kun kaksi käyttäjää tekee muutoksia samaan binaariseen tiedostoon eri commit-tiloissa, syntyy tilanne, jonka ratkaiseminen vaatii järeämpiä konsteja. 5.5.1 Esimerkkinä .docx Vaihe 1: Etähakemiston tilanne (C0) Kaikki käyttäjät aloittavat tilanteesta, jossa test.docx on commit-tilassa C0 ja näyttää seuraavalta: Vaihe 2. Käyttäjä 1 ja käyttäjä 2 tekevät omat muokkauksensa samaan Word-tiedostoon: Kuva. Käyttäjän 1 muokkaukset. Kuva. Käyttäjän 2 muokkaukset. Vaihe 3: Käyttäjä 1:n muutokset hyväksytään Käyttäjä 1 ehtii tekemiensä muokkausten jälkeen ennen Käyttäjä 2:ta tehdä commitin C1 ja push-komennon, ja commit C1 hyväksytään etähakemistoon, koska se perustuu suoraan commit-tilaan C0. Vaihe 4: Käyttäjä 2:n muutokset hylätään Käyttäjä 2 yrittää tehdä test.docx-tiedostoon tekemiensä muokkausten jälkeen commitin C2. Git kuitenkin estää push-komennon, koska etähakemisto on siirtynyt commit-tilaan C1. Tämä aiheuttaa ristiriidan. Käyttäjä 2 ei siis pysty suorittamaan commit-, push- tai pull-komentoja. Kuva. Käyttäjä 2 ajautuu jumiin Gitin kanssa. Commit-tilaa C1 ei pysty hakemaan pull-komennolla, eikä commit-tilaa C2 pysty siirtämään commit-tilan C1 päälle. Vaikka Käyttäjä 2 yrittäisi käyttää git config pull.rebase false ja vetää muutokset ensin, Git ei voi yhdistää kahta eri versiota test.docx-tiedostosta, koska kyseessä on binaarinen tiedosto. 5.6 Yhteenveto git config pull.rebase false on parhaimmillaan tilanteissa, joissa käyttäjät eivät varsinaisesti ole muokanneet samaan aikaan samaa tiedostoa, vaan ovat unohtaneet tehdä pull-komennon ennen kuin tekevät hakemistoon muokkauksia. Tällöin commit-pisteiden välisten ristiriitojen ratkaisu on Gitille melko helppoa. git config pull.rebase false ei sen sijaan ole kovin tehokas ratkaisu tilanteisiin, joissa käyttäjät ovat todella muokanneet samaa tiedostoa samanaikaisesti. Tällaisissa tapauksissa syntyneet ristiriidat vaativat yleensä vähintäänkin manuaalista yhdistämisen muokkailua. Binaaristen tiedostojen kohdalla git config pull.rebase false -tyyppinen muokkausten yhdistäminen ei toimi lainkaan. Koska Git ei voi yhdistää binaaristen tiedostojen sisältöä, kaikki tällaiset ristiriitatilanteet täytyy ratkaista muilla tavoilla, esimerkiksi valitsemalla jompikumpi versio tiedostosta. Käsittelemme viimeksi mainittua seuraavassa luvussa. Divergent Git branches - ongelmasta ratkaisuun © 2025 by Ville Langén is licensed under the CC BY-SA 4.0. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
